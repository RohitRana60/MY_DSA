üë®‚Äçüíªüë®‚ÄçüíªIntroduction to Recursive Functions in Java:-

1. Basics of Recursive Functions:-
 - Definition: A recursive function is a function that calls itself during its execution.
 - Purpose: Recursive functions are used to solve complex problems by breaking them down into
            smaller, more manageable sub-problems.
 - Components:-
  - Base Case(s): Conditions under which the recursion stops.
  - Recursive Case: The part of the function where it calls itself with modified arguments.

2. Java Syntax for Recursive Functions:-
- Declaration:-
  ```java
  public returnType functionName(parameters) {
      // Base case check
      if (baseCase) {
          // return some value;
      } else {
          // Recursive case
          return functionName(modifiedParameters);
      }
  }
  ```
- Example (Factorial Function):-
  ```java
  public class RecursiveExample {

      // Factorial function
      public static int factorial(int n) {
          // Base case
          if (n == 0) {
              return 1;
          } else {
              // Recursive case
              return n * factorial(n - 1);
          }
      }

     // Main method for testing
      public static void main(String[] args) {
          // Test the factorial function
          int result = factorial(5);
          System.out.println("Factorial of 5 is: " + result);
      }
  }
  ```

3. How Recursive Functions Work in Java:-
 - Invocation: The initial call to the recursive function is made with a specific input.
 - Base Case Check: The function checks whether the base case is met.
 - Recursive Case Execution: If the base case is not met, the function performs operations and
                             calls itself with modified inputs.
 - Call Stack Management: The call stack keeps track of function calls, and it is popped as
                          base cases are reached.
 - Local Variables and State: Each recursive call has its set of local variables, maintaining
   independent states.
 - Combining Results: Results from different recursive calls are combined to obtain the final result.

4. Example: Factorial Function in Detail:-
 - Function Calls:
  - `factorial(5)` calls `factorial(4)`, which calls `factorial(3)`, and so on.
 - Base Case:
  - When `n == 0`, the base case is met, and the function returns 1.
 - Combining Results:
  - As the recursive calls unwind, results are multiplied to calculate `5!`.

5. Best Practices in Java:-
 - Ensure a clear and well-defined base case to avoid infinite recursion.
 - Consider the trade-offs between recursion and iteration for performance.
 - Test and validate the function with various inputs to ensure correctness.

6. Examples of Recursive Problems in Java:-
 - Fibonacci Sequence: `F(n) = F(n-1) + F(n-2)`
 - Binary Search: A divide-and-conquer algorithm that halves the search space in each
                  recursive call.
 - Tree Traversal: Recursive approaches are common for navigating tree structures.

7. Pros and Cons in Java:-
 - Pros: Concise and elegant solutions for problems with a natural recursive structure.
 - Cons: Potential for higher memory requirements due to the call stack; efficiency
         considerations for some problems.

8. Termination and Memory Considerations:-
 - Termination of recursion is essential to prevent infinite loops.
 - Recursive functions can use more memory due to the call stack; excessive recursion may
   lead to a stack overflow.

