In Java, the term "scope" refers to the region of the program where a particular variable, method,
 or class is accessible or visible. Understanding the scope of entities in Java is crucial for writing
  well-structured and error-free code. Here are key aspects of the scope in Java:

游꾸 1. **Class Scope:**
   - Class scope refers to the visibility of a variable or method throughout the entire class.
   - Variables declared within a class but outside any method (known as class fields) have class scope.
   - They are accessible to all methods within the class.

   ```java
   public class MyClass {
       // Class-scoped variable
       private int classVariable;

       // Class-scoped method
       public void classMethod() {
           // Access classVariable here
       }
   }
   ```

游꾸 2. **Method Scope:**
   - Method scope pertains to the visibility of variables declared within a method.
   - Method-scoped variables are accessible only within the method in which they are declared.

   ```java
   public class Example {
       public void myMethod() {
           // Method-scoped variable
           int localVar = 10;
           // Access localVar here
       }
   }
   ```

游꾸 3. **Block Scope:**
   - Block scope is related to structures like loops and conditional statements (if, else, switch).
   - Variables declared within a block are only accessible within that block.
   - Introduced with Java 10, the `var` keyword allows the declaration of variables with inferred types
    within blocks.

   ```java
   public class BlockScopeExample {
       public void myMethod() {
           // Block scope
           if (condition) {
               int x = 5;
               // Access x here
           }
           // x is not accessible here
       }
   }
   ```

游꾸 4. **Local Variable Shadowing:**
   - If a variable declared within a block has the same name as a variable in an outer scope, it "shadows"
   the outer variable.
   - The inner variable takes precedence within its scope.

   ```java
   public class ShadowingExample {
       private int x = 10;

       public void myMethod() {
           int x = 5; // Shadows the class-scoped variable x
           // Access inner x (local variable) here
       }

       // Access outer x (class-scoped variable) here
   }
   ```

游꾸 5. **Static and Instance Scope:**
   - Variables and methods can have static or instance scope.
   - Static members belong to the class itself, while instance members belong to individual instances
   (objects) of the class.

   ```java
   public class ScopeExample {
       // Static variable (class scope)
       private static int staticVar;

       // Instance variable (instance scope)
       private int instanceVar;

       // Static method (class scope)
       public static void staticMethod() {
           // Access staticVar here
       }

       // Instance method (instance scope)
       public void instanceMethod() {
           // Access instanceVar here
       }
   }
   ```

游꾸 6. **Access Modifiers:**
   - Access modifiers (public, private, protected, default) define the visibility of classes, methods,
   and variables.
   - They control which parts of the program can access certain entities.

   ```java
   public class MyClass {
       // Accessible to any class
   }

   class DefaultClass {
       // Accessible within the same package
   }

   private class PrivateClass {
       // Accessible only within the same class
   }
   ```

游꾸 7. **Lifetime of Variables:**
   - The lifetime of a variable is the duration during which the variable is stored in memory.
   - Local variables have a shorter lifetime than instance or class variables.

   ```java
   public class LifetimeExample {
       public void myMethod() {
           // Local variable with a short lifetime
           int localVar = 10;
       }

       // Instance variable with a longer lifetime
       private int instanceVar;
   }
   ```

