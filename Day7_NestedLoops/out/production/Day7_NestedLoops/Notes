Nested loops in Java are loops placed within other loops. They allow you to create more complex patterns,
iterate over multi-dimensional arrays, and perform tasks that require multiple levels of iteration.
Java supports several types of nested loops, including nested `for` loops, nested `while` loops, and nested
`do-while` loops. Here's an overview of nested loops and how they work:

1. **Nested `for` Loop:**
   - A nested `for` loop is a `for` loop placed inside another `for` loop.
   - It's used when you need to traverse two-dimensional arrays or perform tasks involving multiple levels
   of iteration.
   - Example:

   ```java
   for (int i = 1; i <= 3; i++) {
       for (int j = 1; j <= 3; j++) {
           System.out.println("i: " + i + ", j: " + j);
       }
   }
   ```

   This code will print a 3x3 grid of pairs (i, j).

2. **Nested `while` Loop:**
   - A nested `while` loop is a `while` loop placed inside another `while` loop.
   - It's used when you need to perform tasks that require multiple levels of iteration, similar to nested
   `for` loops.
   - Example:

   ```java
   int i = 1;
   while (i <= 3) {
       int j = 1;
       while (j <= 3) {
           System.out.println("i: " + i + ", j: " + j);
           j++;
       }
       i++;
   }
   ```

3. **Nested `do-while` Loop:**
   - A nested `do-while` loop is a `do-while` loop placed inside another `do-while` loop.
   - It's used when you need to perform tasks involving multiple levels of iteration, similar to nested
   `for` and `while` loops.
   - Example:

   ```java
   int i = 1;
   do {
       int j = 1;
       do {
           System.out.println("i: " + i + ", j: " + j);
           j++;
       } while (j <= 3);
       i++;
   } while (i <= 3);
   ```

Nested loops allow you to create intricate patterns and efficiently process multi-dimensional
data structures like arrays and matrices. However, they can also make your code more complex,
 so it's essential to use them judiciously and maintain clarity in your code.