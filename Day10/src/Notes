

ðŸ™‚ Java Methods:-

In Java, a method is a collection of statements that perform a specific task and are grouped together
 under a name. Methods provide code reusability, modularity, and abstraction in programming.
  Here are key aspects of Java methods:

 ðŸ“˜Method Declaration:-

 java code Example:-
returnType methodName(parameter1Type parameter1, parameter2Type parameter2, ...) {
    // method body
    // statements to perform the task
    return returnValue; // return statement, if applicable
}


- ðŸ“˜returnType:** Specifies the type of data that the method will return. Use `void` if the method doesn't
return any value.
- ðŸ“˜methodName:** The name of the method, following Java naming conventions.
- ðŸ“˜parameters:** Input values required by the method. They are optional; a method can have zero or more parameters.
- ðŸ“˜method body:** The block of code enclosed in curly braces `{}` that defines what the method does.
- ðŸ“˜return statement:** If the method returns a value, it uses the `return` keyword followed by the value.

ðŸ™‚ Method Types:

1. **Void Methods:**
   - Return type is `void`.
   - Executes a set of statements without returning a value.

   ```java
   void printMessage(String message) {
       System.out.println(message);
   }
   ```

2. **Methods with Return Value:**
   - Return type is a specific data type.
   - Returns a value calculated within the method.

   ```java
   int add(int a, int b) {
       return a + b;
   }
   ```

3. **Methods with Parameters:**
   - Accept input values through parameters.

   ```java
   void greetUser(String name) {
       System.out.println("Hello, " + name + "!");
   }
   ```

4. **Methods without Parameters:**
   - Do not accept any input parameters.

   ```java
   void displayWelcome() {
       System.out.println("Welcome to the program!");
   }
   ```

ðŸ™‚ Calling a Method:

- To execute a method, you call it using its name followed by parentheses.

  ```java
  printMessage("This is a method.");
  int sum = add(3, 4);
  greetUser("John");
  displayWelcome();
  ```

ðŸ™‚ Method Overloading:

- Method overloading allows defining multiple methods with the same name in the same class,
differentiating them by their parameter types or number of parameters.

  ```java
  int add(int a, int b) {
      return a + b;
  }

  double add(double a, double b) {
      return a + b;
  }
  ```

ðŸ™‚ Recursive Methods:

- A method that calls itself is called a recursive method.

  ```java
  int factorial(int n) {
      if (n == 0 || n == 1) {
          return 1;
      } else {
          return n * factorial(n - 1);
      }
  }
  ```

 ðŸ™‚Access Modifiers:

- Methods can have access modifiers to control their visibility:
  - `public`: Accessible from any other class.
  - `private`: Accessible only within the same class.
  - `protected`: Accessible within the same class and its subclasses.
  - (default): Accessible within the same package.

ðŸ™‚ Static Methods:

- Static methods belong to the class rather than an instance of the class.
- They are called using the class name, not an instance of the class.

  ```java
  static int square(int num) {
      return num * num;
  }
  ```

ðŸ™‚ Final Methods:

- Final methods cannot be overridden by subclasses.

  ```java
  final void finalMethod() {
      // method body
  }
  ```

ðŸ™‚ Summary:

- **Method Signature:** Combination of method name and parameter types.
- **Method Body:** Contains the statements defining the method's behavior.
- **Return Type:** Specifies the type of value the method returns (use `void` if no return value).
- **Parameters:** Input values required by the method.
- **Calling a Method:** Invoke a method using its name, followed by parentheses.
- **Overloading:** Define multiple methods with the same name but different parameters.
- **Recursive Methods:** Methods that call themselves.
- **Access Modifiers:** Control the visibility of methods.
- **Static Methods:** Belong to the class rather than an instance.
- **Final Methods:** Cannot be overridden by subclasses.

