Conditionals in Java are used to make decisions in a program by allowing it to execute different
blocks of code based on whether a specified condition is true or false.
 Conditionals are a fundamental part of programming and are used to control the flow of a program.
  In Java, there are primarily three types of conditionals: `if`, `if-else`, and `switch`. Here are detailed
  notes on each of them:

1. **if Statement:**
   - The `if` statement is used to execute a block of code only if a specified condition is true.
   - If the condition is false, the code block is skipped.
   - It has a simple syntax:

   ```java
   if (condition) {
       // Code to execute if the condition is true
   }
   ```

   - Example:

   ```java
   int x = 10;
   if (x > 5) {
       System.out.println("x is greater than 5");
   }
   ```

2. **if-else Statement:**
   - The `if-else` statement is used to execute one block of code if a condition is true and another block
   if the condition is false.
   - It has the following syntax:

   ```java
   if (condition) {
       // Code to execute if the condition is true
   } else {
       // Code to execute if the condition is false
   }
   ```

   - Example:

   ```java
   int y = 3;
   if (y > 5) {
       System.out.println("y is greater than 5");
   } else {
       System.out.println("y is not greater than 5");
   }
   ```

3. **switch Statement:**
   - The `switch` statement is used to select one of many code blocks to be executed based on the value
   of an expression.
   - It provides a more structured way to handle multiple conditions.
   - The syntax includes the `switch` keyword, `case` labels, and an optional `default` case.

   ```java
   switch (expression) {
       case value1:
           // Code to execute if expression equals value1
           break;
       case value2:
           // Code to execute if expression equals value2
           break;
       // ... more cases ...
       default:
           // Code to execute if none of the cases match
   }
   ```

   - Example:

   ```java
   int day = 3;
   switch (day) {
       case 1:
           System.out.println("Monday");
           break;
       case 2:
           System.out.println("Tuesday");
           break;
       // ... other cases ...
       default:
           System.out.println("Unknown day");
   }
   ```

4. **Nested Conditionals:**
   - Conditionals can be nested within each other to create more complex decision-making structures.
   - You can have `if` or `if-else` statements inside other `if` or `if-else` blocks.

   ```java
   if (condition1) {
       if (condition2) {
           // Code to execute if both conditions are true
       } else {
           // Code to execute if condition1 is true, but condition2 is false
       }
   } else {
       // Code to execute if condition1 is false
   }
   ```

Conditionals are a fundamental building block in programming, allowing you to create programs that
 respond to different situations and make intelligent decisions based on data and user input.
 They are used extensively in various aspects of software development, from user interfaces to algorithms
  and data processing.