Loops in Java are control structures that allow you to repeatedly execute a block of code.
They are used when you need to perform a specific action multiple times or iterate through a collection of data.
 Java provides several types of loops, including `for`, `while`, `do-while`, and the enhanced `for-each` loop.
  Here are detailed notes on each type of loop in Java:

1. **for Loop:**
   - The `for` loop is used to execute a block of code a specific number of times.
   - It consists of an initialization, a condition, and an update statement.
   - The syntax of a `for` loop is as follows:

   ```java
   for (initialization; condition; update) {
       // Code to execute repeatedly
   }
   ```

   - Example:

   ```java
   for (int i = 1; i <= 5; i++) {
       System.out.println("Iteration " + i);
   }
   ```

2. **while Loop:**
   - The `while` loop is used to execute a block of code as long as a specified condition is true.
   - The condition is evaluated before the loop body is executed.
   - The syntax of a `while` loop is as follows:

   ```java
   while (condition) {
       // Code to execute repeatedly
   }
   ```

   - Example:

   ```java
   int count = 1;
   while (count <= 5) {
       System.out.println("Count: " + count);
       count++;
   }
   ```

3. **do-while Loop:**
   - The `do-while` loop is similar to the `while` loop but guarantees that the loop body is executed at least once,
   even if the condition is false.
   - The condition is evaluated after the loop body is executed.
   - The syntax of a `do-while` loop is as follows:

   ```java
   do {
       // Code to execute repeatedly
   } while (condition);
   ```

   - Example:

   ```java
   int num = 1;
   do {
       System.out.println("Number: " + num);
       num++;
   } while (num <= 5);
   ```

4. **for-each Loop:**
   - The enhanced `for-each` loop is used to iterate over elements in an array, collection, or other iterable objects.
   - It simplifies the process of iterating through data structures.
   - The syntax of a `for-each` loop is as follows:

   ```java
   for (elementType element : arrayOrCollection) {
       // Code to process each element
   }
   ```

   - Example:

   ```java
   int[] numbers = {1, 2, 3, 4, 5};
   for (int number : numbers) {
       System.out.println("Number: " + number);
   }
   ```

Loops are essential for automating repetitive tasks, processing large sets of data, and controlling the flow of your programs.
 They allow you to write more efficient and concise code, and mastering loop
 constructs is a fundamental skill for any Java developer. The choice of loop type depends on the specific requirements
  of your program and the nature of the task you need to perform.


  In Java, `continue` and `break` are two keywords used to control the flow of loops,
   specifically in `for`, `while`, and `do-while` loops. These keywords provide a way to skip iterations and exit loops prematurely,
   enhancing the flexibility and control you have over loop execution.

  Here are detailed notes on the `continue` and `break` keywords:

  ### `continue` Keyword:

  The `continue` keyword is used to skip the current iteration of a loop and move to the next iteration.
   It is primarily used when you want to avoid executing the remaining code in the current loop iteration
    and proceed to the next one.

  Key points about `continue`:

  1. **Usage**: The `continue` statement is typically used within a loop, such as a `for`, `while`, or `do-while` loop.

  2. **Behavior**: When a `continue` statement is encountered within a loop, the loop immediately jumps to the next iteration,
   bypassing any code that follows the `continue` statement within the current iteration.

  3. **Common Use Cases**:
     - Skipping specific iterations based on a condition.
     - Avoiding the execution of code for certain elements in an array or collection.

  Example of using `continue`:

  ```java
  for (int i = 1; i <= 5; i++) {
      if (i == 3) {
          continue; // Skip iteration 3
      }
      System.out.println("Iteration " + i);
  }
  ```

  Output:
  ```
  Iteration 1
  Iteration 2
  Iteration 4
  Iteration 5
  ```

  ### `break` Keyword:

  The `break` keyword is used to prematurely exit a loop. It allows you to terminate the loop and continue execution of
  code outside of the loop.

  Key points about `break`:

  1. **Usage**: The `break` statement is used within a loop to exit the loop prematurely.

  2. **Behavior**: When a `break` statement is encountered, the loop in which it is used is immediately terminated,
   and the program execution continues with the code outside the loop.

  3. **Common Use Cases**:
     - Terminating a loop when a certain condition is met.
     - Exiting a loop early to avoid unnecessary iterations.

  Example of using `break`:

  ```java
  int[] numbers = {1, 2, 3, 4, 5};
  for (int number : numbers) {
      if (number == 3) {
          break; // Exit the loop when number is 3
      }
      System.out.println("Number: " + number);
  }
  ```

  Output:
  ```
  Number: 1
  Number: 2
  ```

  In summary, the `continue` keyword is used to skip the current iteration of a loop, while the `break` keyword
  is used to exit a loop prematurely. These keywords provide control over the flow of loops and help you write more efficient
  and customized loop structures in your Java programs.